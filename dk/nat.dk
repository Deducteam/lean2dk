Nat: Type.
z: Nat.
s: Nat -> Nat.
def max: Nat -> Nat -> Nat.

[i] max i z --> i.
[i] max z i --> i.
[i, j] max (s i) (s j) --> s (max i j).

def plus: Nat -> Nat -> Nat.
[i] plus z i --> i.
[i, j] plus (s i) j --> s (plus i j).


def eq: Nat -> Nat -> bool.Bool.
[] eq z z --> bool.true.
[n] eq (s n) z --> bool.false.
[m] eq z (s m) --> bool.false.
[n, m] eq (s n) (s m) --> eq n m.

def lq: Nat -> Nat -> bool.Bool.
[] lq z z --> bool.false.
[m] lq z (s m) --> bool.true.
[m] lq (s m) z --> bool.false.
[n, m] lq (s n) (s m) --> lq n m.


def leq: Nat -> Nat -> bool.Bool.
[n] leq z n --> bool.true.
[m] leq (s m) z --> bool.false.
[n, m] leq (s n) (s m) --> leq n m.


def ite: bool.Bool -> Nat -> Nat -> Nat.
[n] ite bool.true n _ --> n.
[n] ite bool.false _ n --> n.
