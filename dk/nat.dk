Nat: Type.
nnil: Nat.
defac nunion [Nat].

def z: Nat.
[] z --> nnil.
def s: Nat -> Nat.
[n] s n --> nunion z n.
def max: Nat -> Nat -> Nat.

[i] max i nnil --> i.
[i] max nnil i --> i.
[i, j] max (nunion nnil i) (nunion nnil j) --> s (max i j).

def plus: Nat -> Nat -> Nat.
[i] plus nnil i --> i.
[i, j] plus (nunion nnil i) j --> s (plus i j).


def eq: Nat -> Nat -> bool.Bool.
[] eq nnil nnil --> bool.true.
[n] eq (nunion nnil n) nnil --> bool.false.
[m] eq nnil (nunion nnil m) --> bool.false.
[n, m] eq (nunion nnil n) (nunion nnil m) --> eq n m.

def lq: Nat -> Nat -> bool.Bool.
[] lq nnil nnil --> bool.false.
[m] lq nnil (nunion nnil m) --> bool.true.
[m] lq (nunion nnil m) nnil --> bool.false.
[n, m] lq (nunion nnil n) (nunion nnil m) --> lq n m.


def leq: Nat -> Nat -> bool.Bool.
[n] leq nnil n --> bool.true.
[m] leq (nunion nnil m) nnil --> bool.false.
[n, m] leq (nunion nnil n) (nunion nnil m) --> leq n m.


def ite: bool.Bool -> Nat -> Nat -> Nat.
[n] ite bool.true n _ --> n.
[n] ite bool.false _ n --> n.
