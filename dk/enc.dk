Univ : lvl.Lvl -> Type.

Sort : s:lvl.Lvl -> Univ (lvl.s s).

def El : s:lvl.Lvl -> Univ s -> Type.
(;[l] El (lvl.s (normalize.var l)) (Sort (normalize.var l)) --> Univ (normalize.var l).;)
[l] El (normalize.maxS (sublvl.cons (sublvl.a (lvl.cons l lvl.nil) l (nat.s nat.z)) sublvl.nil))
  (enc.Sort (normalize.maxS (sublvl.cons (sublvl.a (lvl.cons l lvl.nil) l nat.z) sublvl.nil))) --> Univ (normalize.var l).

Pi : s1:lvl.Lvl -> s2:lvl.Lvl -> s3:lvl.Lvl -> t:Univ s1 -> (El s1 t -> Univ s2) -> Univ s3.
[s1, s2, s3, t, f] El s3 (Pi s1 s2 s3 t f) --> x:(El s1 t) -> (El s2 (f x)).
