SubLvl: Type.

def a: lvl.Set -> lvl.Lvl -> nat.Nat -> SubLvl.
def b: lvl.Set -> nat.Nat -> SubLvl.

Set: Type.
nil: Set.
def singleton: SubLvl -> Set.
defac union [Set].
def cons: SubLvl -> Set -> Set.
[l, s] cons s l --> union (singleton s) l.

def iteset: bool.Bool -> Set -> Set -> Set.
[n] iteset bool.true n _ --> n.
[n] iteset bool.false _ n --> n.

(; comparing b _ _ with b _ _ ;)
[s, n, sls] union (singleton (b s n)) (union (singleton (b s n)) sls) --> union (singleton (b s n)) sls.
[s, s', n, sls] union (singleton (b (lvl.union s s') n)) (union (singleton (b s n)) sls) --> union (singleton (b s n)) sls.
[s, n, n', sls] union (singleton (b s n)) (union (singleton (b s (nat.nunion n n'))) sls) --> union (singleton (b s (nat.nunion n n'))) sls.
[s, s', n, n', sls] union (singleton (b (lvl.union s s') n)) (union (singleton (b s (nat.nunion n n'))) sls) --> union (singleton (b s (nat.nunion n n'))) sls.

(; comparing b _ _ with a _ _ _ ;)
[s, l, n, sls] union (singleton (b _ nat.nnil)) (union (singleton (a s l n)) sls) --> union (singleton (a s l n)) sls.
[s, l, n, sls] union (singleton (b s n)) (union (singleton (a s l n)) sls) --> union (singleton (a s l n)) sls.
[s, s', l, n, sls] union (singleton (b (lvl.union s s') n)) (union (singleton (a s l n)) sls) --> union (singleton (a s l n)) sls.
[s, l, n, n', sls] union (singleton (b s n)) (union (singleton (a s l (nat.nunion n n'))) sls) --> union (singleton (a s l (nat.nunion n n'))) sls.
[s, s', l, n, n', sls] union (singleton (b (lvl.union s s') n)) (union (singleton (a s l (nat.nunion n n'))) sls) --> union (singleton (a s l (nat.nunion n n'))) sls.

(; comparing a _ _ _ with a _ _ _ ;)
[s, l, n, sls] union (singleton (a s l n)) (union (singleton (a s l n)) sls) --> union (singleton (a s l n)) sls.
[s, s', l, n, sls] union (singleton (a (lvl.union s s') l n)) (union (singleton (a s l n)) sls) --> union (singleton (a s l n)) sls.
[s, l, n, n', sls] union (singleton (a s l n)) (union (singleton (a s l (nat.nunion n n'))) sls) --> union (singleton (a s l (nat.nunion n n'))) sls.
[s, s', l, n, n', sls] union (singleton (a (lvl.union s s') l n)) (union (singleton (a s l (nat.nunion n n'))) sls) --> union (singleton (a s l (nat.nunion n n'))) sls.

(; remove duplicates (e.g. nils) ;)
[sl, sls] union sl (union sl sls) --> union sl sls.
[sl] union sl sl --> sl.

def s: Set -> Set.
[] s nil --> nil.
[l1, n, q] s (union (singleton (b l1 n)) q) --> cons (b l1 (nat.s n)) (s q).
[l1, x, n, q] s (union (singleton (a l1 x n)) q) --> cons (a l1 x (nat.s n)) (cons (b lvl.nil (nat.s nat.z)) (s q)).
